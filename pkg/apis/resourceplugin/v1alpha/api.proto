// To regenerate api.pb.go run hack/update-generated-resource-plugin.sh
syntax = "proto3";

package resourceplugin;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.goproto_getters_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;


// Registration is the service advertised by the Kubelet
// Only when Kubelet answers with a success code to a Register Request
// may Resource Plugins start their service
// Registration may fail when resource plugin version is not supported by
// Kubelet or the registered resourceName is already taken by another
// active resource plugin. Resource plugin is expected to terminate upon registration failure
service Registration {
	rpc Register(RegisterRequest) returns (Empty) {}
}

message ResourcePluginOptions {
	// Indicates if PreStartContainer call is required before each container start
	bool pre_start_required = 1;
	// Indicates if GetPreferredAllocation is implemented and available for calling
	bool get_preferred_allocation_available = 2;
}

message RegisterRequest {
	// Version of the API the Resource Plugin was built against
	string version = 1;
	// Name of the unix socket the resource plugin is listening on
	// PATH = path.Join(ResourcePluginPath, endpoint)
	string endpoint = 2;
	// Schedulable resource name. As of now it's expected to be a DNS Label
	string resource_name = 3;
	// Options to be communicated with Resource Manager
	ResourcePluginOptions options = 4;
}

message Empty {
}

// ResourcePlugin is the service advertised by Resource Plugins
service ResourcePlugin {
	// GetResourcePluginOptions returns options to be communicated with Resource
	// Manager
	rpc GetResourcePluginOptions(Empty) returns (ResourcePluginOptions) {}

	// ListAndWatch returns a stream of List of Resources
	// Whenever a Resource state change or a Resource disappears, ListAndWatch
	// returns the new list
	rpc ListAndWatch(Empty) returns (stream ListAndWatchResponse) {}

	// GetPreferredAllocation returns a preferred set of resources to allocate
	// from a list of available ones. The resulting preferred allocation is not
	// guaranteed to be the allocation ultimately performed by the
	// resourcemanager. It is only designed to help the resourcemanager make a more
	// informed allocation decision when possible.
	rpc GetPreferredAllocation(PreferredAllocationRequest) returns (PreferredAllocationResponse) {}

	// Allocate is called during container creation so that the Resource
	// Plugin can run resource specific operations and instruct Kubelet
	// of the steps to make the Resource available in the container
	rpc Allocate(AllocateRequest) returns (AllocateResponse) {}

	// PreStartContainer is called, if indicated by Resource Plugin during registeration phase,
	// before each container start. Resource plugin can run resource specific operations
	// such as resetting the resource before making resources available to the container
	rpc PreStartContainer(PreStartContainerRequest) returns (PreStartContainerResponse) {}
}

// ListAndWatch returns a stream of List of Resources
// Whenever a Resource state change or a Resource disappears, ListAndWatch
// returns the new list
message ListAndWatchResponse {
	repeated Resource resources = 1;
}

message TopologyInfo {
	repeated NUMANode nodes = 1;
}

message NUMANode {
	int64 ID = 1;
}

/* E.g:
* struct Resource {
*    ID: "GPU-fef8089b-4820-abfc-e83e-94318197576e",
*    Health: "Healthy",
*    Topology:
*      Node:
*        ID: 1
*} */
message Resource {
	// A unique ID assigned by the resource plugin used
	// to identify resources during the communication
	// Max length of this field is 63 characters
	string ID = 1;
	// Health of the resource, can be healthy or unhealthy, see constants.go
	string health = 2;
	// Topology for resource
	TopologyInfo topology = 3;
}

// - PreStartContainer is expected to be called before each container start if indicated by plugin during registration phase.
// - PreStartContainer allows kubelet to pass reinitialized resources to containers.
// - PreStartContainer allows Resource Plugin to run resource specific operations on
//   the Resources requested
message PreStartContainerRequest {
	repeated string resources_ids = 1 [(gogoproto.customname) = "ResourcesIDs"];
}

// PreStartContainerResponse will be send by plugin in response to PreStartContainerRequest
message PreStartContainerResponse {
}

// PreferredAllocationRequest is passed via a call to GetPreferredAllocation()
// at pod admission time. The resource plugin should take the list of
// `available_resourceIDs` and calculate a preferred allocation of size
// 'allocation_size' from them, making sure to include the set of resources
// listed in 'must_include_resourceIDs'.
message PreferredAllocationRequest {
	repeated ContainerPreferredAllocationRequest container_requests = 1;
}

message ContainerPreferredAllocationRequest {
	// List of available resourceIDs from which to choose a preferred allocation
	repeated string available_resourceIDs = 1;
	// List of resourceIDs that must be included in the preferred allocation
	repeated string must_include_resourceIDs = 2;
	// Number of resources to include in the preferred allocation
	int32 allocation_size = 3;
}

// PreferredAllocationResponse returns a preferred allocation,
// resulting from a PreferredAllocationRequest.
message PreferredAllocationResponse {
	repeated ContainerPreferredAllocationResponse container_responses = 1;
}

message ContainerPreferredAllocationResponse {
	repeated string resourceIDs = 1;
}

// - Allocate is expected to be called during pod creation since allocation
//   failures for any container would result in pod startup failure.
// - Allocate allows kubelet to exposes additional artifacts in a pod's
//   environment as directed by the plugin.
// - Allocate allows Resource Plugin to run resource specific operations on
//   the Resources requested
message AllocateRequest {
	repeated ContainerAllocateRequest container_requests = 1;
}

message ContainerAllocateRequest {
	repeated string resources_ids = 1 [(gogoproto.customname) = "ResourcesIDs"];
}

// AllocateResponse includes the artifacts that needs to be injected into
// a container for accessing 'ResourceIDs' that were mentioned as part of
// 'AllocateRequest'.
// Failure Handling:
// if Kubelet sends an allocation request for dev1 and dev2.
// Allocation on dev1 succeeds but allocation on dev2 fails.
// The Resource plugin should send a ListAndWatch update and fail the
// Allocation request
message AllocateResponse {
	repeated ContainerAllocateResponse container_responses = 1;
}

message ContainerAllocateResponse {
  	// List of environment variable to be set in the container to access one of more Resources.
	map<string, string> envs = 1;
	// Mounts for the container.
	repeated Mount mounts = 2;
	// Resources for the container.
	repeated ResourceSpec resources = 3;
	// Container annotations to pass to the container runtime
	map<string, string> annotations = 4;
}

// Mount specifies a host volume to mount into a container.
// where resource library or tools are installed on host and container
message Mount {
	// Path of the mount within the container.
	string container_path = 1;
	// Path of the mount on the host.
	string host_path = 2;
	// If set, the mount is read-only.
	bool read_only = 3;
}

// ResourceSpec specifies a host resource to mount into a container.
message ResourceSpec {
	// Path of the resource within the container.
	string container_path = 1;
	// Path of the resource on the host.
	string host_path = 2;
	// Cgroups permissions of the resource, candidates are one or more of
	// * r - allows container to read from the specified resource.
	// * w - allows container to write to the specified resource.
	// * m - allows container to create resource files that do not yet exist.
	string permissions = 3;
}
